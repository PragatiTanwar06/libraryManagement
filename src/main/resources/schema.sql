DROP TABLE IF EXISTS PROCEEDINGS;
DROP TABLE IF EXISTS WRITES;
DROP TABLE IF EXISTS AUTHOR;
DROP TABLE IF EXISTS BOOK;
DROP TABLE IF EXISTS INV_EDITOR;
DROP TABLE IF EXISTS JOURNAL_ISSUE;
DROP TABLE IF EXISTS JOURNAL_VOLUME;
DROP TABLE IF EXISTS CHIEF_EDITOR;
DROP TABLE IF EXISTS RESERVES;
DROP TABLE IF EXISTS BORROWS;
DROP TABLE IF EXISTS READER;
DROP TABLE IF EXISTS COPY;
DROP TABLE IF EXISTS BRANCH;
DROP TABLE IF EXISTS DOCUMENT;
DROP TABLE IF EXISTS PUBLISHER;


create table PUBLISHER(
PUBLISHERID BIGINT NOT NULL AUTO_INCREMENT,
PUBNAME VARCHAR (50) NOT NULL,
ADDRESS VARCHAR (100) NOT NULL,
PRIMARY KEY (PUBLISHERID)
);


create table DOCUMENT(
DOCID BIGINT NOT NULL AUTO_INCREMENT,
TITLE VARCHAR (50) NOT NULL,
PDATE DATETIME NOT NULL,
PUBLISHERID BIGINT NOT NULL,
PRIMARY KEY (DOCID),
FOREIGN KEY (PUBLISHERID) REFERENCES PUBLISHER(PUBLISHERID)
ON DELETE CASCADE
ON UPDATE CASCADE
);


create table PROCEEDINGS (
DOCID BIGINT NOT NULL,
CDATE DATETIME ,
CLOCATION VARCHAR (50),
CEDITOR VARCHAR (50),
PRIMARY KEY (DOCID),
FOREIGN KEY (DOCID) REFERENCES DOCUMENT(DOCID)
ON DELETE CASCADE
ON UPDATE CASCADE
);



create table BOOK(
DOCID BIGINT NOT NULL,
ISBN VARCHAR (42),
PRIMARY KEY (DOCID),
FOREIGN KEY (DOCID) REFERENCES DOCUMENT(DOCID)
ON DELETE CASCADE
ON UPDATE CASCADE
);


create table AUTHOR(
AUTHORID BIGINT NOT NULL AUTO_INCREMENT,
ANAME VARCHAR (50),
PRIMARY KEY (AUTHORID)
);


create table WRITES (
AUTHORID BIGINT NOT NULL,
DOCID BIGINT NOT NULL,
FOREIGN KEY (AUTHORID) REFERENCES AUTHOR(AUTHORID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (DOCID) REFERENCES BOOK(DOCID)
ON DELETE CASCADE
ON UPDATE CASCADE
);


create table CHIEF_EDITOR(
EDITOR_ID BIGINT NOT NULL AUTO_INCREMENT,
ENAME VARCHAR (50),
PRIMARY KEY (EDITOR_ID)
);


create table JOURNAL_VOLUME(
DOCID BIGINT NOT NULL,
JVOLUME VARCHAR (50),
EDITOR_ID BIGINT NOT NULL,
PRIMARY KEY (DOCID),
FOREIGN KEY (DOCID) REFERENCES DOCUMENT(DOCID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (EDITOR_ID) REFERENCES CHIEF_EDITOR(EDITOR_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


create table JOURNAL_ISSUE (
DOCID BIGINT NOT NULL,
ISSUE_NO BIGINT NOT NULL,
SCOPE VARCHAR (50),
CONSTRAINT pk_journal_issue PRIMARY KEY (DOCID,ISSUE_NO),
FOREIGN KEY (DOCID) REFERENCES JOURNAL_VOLUME (DOCID) ON DELETE CASCADE ON UPDATE CASCADE
);


create table INV_EDITOR (
DOCID BIGINT NOT NULL,
ISSUE_NO BIGINT NOT NULL,
IENAME VARCHAR (50),
FOREIGN KEY (DOCID,ISSUE_NO) REFERENCES JOURNAL_ISSUE (DOCID,ISSUE_NO) ON DELETE CASCADE ON UPDATE CASCADE
);


create table BRANCH (
LIBID BIGINT NOT NULL AUTO_INCREMENT,
LNAME VARCHAR (50),
LLOCATION VARCHAR (50),
PRIMARY KEY (LIBID)
);



create table COPY (
DOCID BIGINT NOT NULL,
COPYNO BIGINT NOT NULL,
LIBID BIGINT NOT NULL,
POSITION VARCHAR (6) NOT NULL,
CONSTRAINT pk_copy PRIMARY KEY (DOCID,COPYNO,LIBID),
FOREIGN KEY (DOCID) REFERENCES DOCUMENT(DOCID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (LIBID) REFERENCES BRANCH (LIBID) ON DELETE CASCADE ON UPDATE CASCADE
);


create table READER (
READERID VARCHAR (32) NOT NULL,
RPASSWORD VARCHAR (100),
RTYPE VARCHAR (32) NOT NULL,
RNAME VARCHAR (30) NOT NULL,
ADDRESS VARCHAR (60) NOT NULL,
PRIMARY KEY (READERID)
);


create table RESERVES (
RESUMBER BIGINT  NOT NULL AUTO_INCREMENT,
READERID VARCHAR (32) NOT NULL,
DOCID BIGINT NOT NULL,
COPYNO BIGINT NOT NULL,
LIBID BIGINT NOT NULL,
DTIME DATETIME ,
PRIMARY KEY (RESUMBER),
FOREIGN KEY (DOCID,COPYNO,LIBID) REFERENCES COPY (DOCID,COPYNO,LIBID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (READERID) REFERENCES READER (READERID) ON DELETE CASCADE ON UPDATE CASCADE
);


create table BORROWS (
BORNUMBER BIGINT NOT NULL AUTO_INCREMENT,
READERID VARCHAR (32) NOT NULL,
DOCID BIGINT NOT NULL,
COPYNO BIGINT NOT NULL,
LIBID BIGINT NOT NULL,
BDTIME DATETIME ,
RDTIME DATETIME,
PRIMARY KEY (BORNUMBER),
FOREIGN KEY (DOCID,COPYNO,LIBID) REFERENCES COPY (DOCID,COPYNO,LIBID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (READERID) REFERENCES READER (READERID) ON DELETE CASCADE ON UPDATE CASCADE
);

ALTER TABLE RESERVES AUTO_INCREMENT = 1000;
ALTER TABLE BORROWS AUTO_INCREMENT = 1000;

